Program -> Declaration-list $
Declaration-list -> Declaration Declaration-list
Declaration-list -> EPSILON 
Declaration -> Declaration-initial Declaration-prime
Declaration-initial -> Type-specifier #saveID ID
Declaration-prime -> Fun-declaration-prime
Declaration-prime -> Var-declaration-prime
Var-declaration-prime -> ; #initVar
Var-declaration-prime -> [ #pnum NUM ] ; #initArr
Fun-declaration-prime ->  #special_save #start_symbol ( Params ) #label #init_variable #init_variable #startreturn Compound-stmt #endreturn #return_address #add_function_to_symbol_table #special_save_pair
Type-specifier -> #setType int
Type-specifier -> #setType void
Params -> int ID Param-prime Param-list
Params -> void Param-list-void-abtar
Param-list-void-abtar -> ID Param-prime Param-list
Param-list-void-abtar -> EPSILON
Param-list -> , Param Param-list
Param-list -> EPSILON
Param -> Declaration-initial Param-prime
Param-prime -> [  ]
Param-prime -> EPSILON
Compound-stmt -> { Declaration-list Statement-list }
Statement-list -> Statement Statement-list
Statement-list -> EPSILON
Statement -> Expression-stmt
Statement -> Compound-stmt
Statement -> Selection-stmt
Statement -> Iteration-stmt
Statement -> Return-stmt
Statement -> For-stmt
Expression-stmt -> Expression ; #pop
Expression-stmt -> break ; #break
Expression-stmt -> ;
Selection-stmt -> if ( Expression ) #save Statement else #jpf_save Statement #jp
Iteration-stmt -> while #label ( Expression ) #startbreak #save Statement #while #endbreak
Return-stmt -> return Return-stmt-prime #return
Return-stmt-prime -> ;
Return-stmt-prime -> Expression ;
For-stmt -> for #iteration_start ID = Vars #jmp_end #set_start_for Statement #jmp_start
Vars -> #save_for_var Var Var-zegond
Var-zegond -> , #save_for_var Var Var-zegond
Var-zegond -> EPSILON
Var -> ID Var-prime
Expression -> Simple-expression-zegond
Expression -> #pid ID B
B -> = Expression #assign
B -> [ Expression ] #index H
B -> Simple-expression-prime
H -> = Expression #assign
H -> G D C
Simple-expression-zegond -> Additive-expression-zegond C
Simple-expression-prime -> Additive-expression-prime C
C -> #saveID Relop Additive-expression #opperation
C -> EPSILON
Relop -> <
Relop -> ==
Additive-expression -> Term D
Additive-expression-prime -> Term-prime D
Additive-expression-zegond -> Term-zegond D
D -> #saveOperation Addop Term #opperation D
D -> EPSILON
Addop -> +
Addop -> -
Term -> Signed-factor G
Term-prime -> Signed-factor-prime G
Term-zegond -> Signed-factor-zegond G
G -> * Signed-factor #mult G
G -> EPSILON
Signed-factor -> + Factor
Signed-factor -> - Factor #inverse
Signed-factor -> Factor
Signed-factor-prime -> Factor-prime
Signed-factor-zegond -> + Factor
Signed-factor-zegond -> - Factor #inverse
Signed-factor-zegond -> Factor-zegond
Factor -> ( Expression )
Factor -> #pid ID Var-call-prime
Factor -> #pnum NUM
Var-call-prime -> ( Args #output ) #call_function
Var-call-prime -> Var-prime
Var-prime -> [ Expression ] #index
Var-prime -> EPSILON
Factor-prime -> ( Args #output ) #call_function
Factor-prime -> EPSILON
Factor-zegond -> ( Expression )
Factor-zegond -> #pnum NUM
Args -> Arg-list
Args -> EPSILON
Arg-list -> Expression Arg-list-prime
Arg-list-prime -> , Expression Arg-list-prime
Arg-list-prime -> EPSILON